=====================================================
Security
=====================================================

.. include:: ../../includes_server_security/includes_server_security_ssl.rst

.. warning:: The FQDN for the Chef server should not exceed 64 characters when using OpenSSL. OpenSSL requires the ``CN`` in a certificate to be no longer than 64 characters.

.. warning:: By default, the Chef server uses the FQDN to determine the common name (``CN``). If the FQDN of the Chef server is longer than 64 characters, the ``reconfigure`` command will not fail, but an empty certificate file will be created. Nginx will not start if a certificate file is empty.

SSL Certificates
=====================================================
.. include:: ../../includes_server_security/includes_server_security_ssl_cert_custom.rst

For example:

.. code-block:: ruby

   nginx['ssl_certificate']  = "/etc/pki/tls/certs/your-host.crt"
   nginx['ssl_certificate_key']  = "/etc/pki/tls/private/your-host.key"

Save the file, and then run the following command:

.. code-block:: bash

   $ sudo chef-server-ctl reconfigure

For more information about the server configuration file, see :doc:`chef-server.rb </config_rb_server>`.

SSL Protocols
-----------------------------------------------------
.. include:: ../../includes_server_tuning/includes_server_tuning_nginx.rst

**Example: Configure SSL Keys for Nginx**

The following example shows how the Chef server sets up and configures SSL certificates for Nginx. The cipher suite used by Nginx `is configurable <https://docs.chef.io/config_rb_server.html#ssl-protocols>`_ using the ``ssl_protocols`` and ``ssl_ciphers`` settings.

.. code-block:: ruby

   ssl_keyfile = File.join(nginx_ca_dir, "#{node['private_chef']['nginx']['server_name']}.key")
   ssl_crtfile = File.join(nginx_ca_dir, "#{node['private_chef']['nginx']['server_name']}.crt")
   ssl_signing_conf = File.join(nginx_ca_dir, "#{node['private_chef']['nginx']['server_name']}-ssl.conf")
   
   unless File.exists?(ssl_keyfile) && File.exists?(ssl_crtfile) && File.exists?(ssl_signing_conf)
     file ssl_keyfile do
       owner 'root'
       group 'root'
       mode '0755'
       content '/opt/opscode/embedded/bin/openssl genrsa 2048'
       not_if { File.exist?(ssl_keyfile) }
     end
   
     file ssl_signing_conf do
       owner 'root'
       group 'root'
       mode '0755'
       not_if { File.exist?(ssl_signing_conf) }
       content <<-EOH
     [ req ]
     distinguished_name = req_distinguished_name
     prompt = no
     [ req_distinguished_name ]
     C                      = #{node['private_chef']['nginx']['ssl_country_name']}
     ST                     = #{node['private_chef']['nginx']['ssl_state_name']}
     L                      = #{node['private_chef']['nginx']['ssl_locality_name']}
     O                      = #{node['private_chef']['nginx']['ssl_company_name']}
     OU                     = #{node['private_chef']['nginx']['ssl_organizational_unit_name']}
     CN                     = #{node['private_chef']['nginx']['server_name']}
     emailAddress           = #{node['private_chef']['nginx']['ssl_email_address']}
     EOH
     end
   
     ruby_block 'create crtfile' do
       block do
         r = Chef::Resource::File.new(ssl_crtfile, run_context)
         r.owner 'root'
         r.group 'root'
         r.mode '0755'
         r.content "/opt/opscode/embedded/bin/openssl req -config '#{ssl_signing_conf}' -new -x509 -nodes -sha1 -days 3650 -key '#{ssl_keyfile}'"
         r.not_if { File.exist?(ssl_crtfile) }
         r.run_action(:create)
       end
     end
   end

Chef Analytics
-----------------------------------------------------
.. include:: ../../includes_server_security/includes_server_security_ssl_cert_custom_analytics.rst

Knife, chef-client
-----------------------------------------------------
.. include:: ../../includes_server_security/includes_server_security_ssl_cert_client.rst

See `SSL Certificates <https://docs.chef.io/chef_client_security.html#ssl-certificates>`__ for more information about how knife and the chef-client use SSL certificates generated by the Chef server.

Private Certificate Authority
-----------------------------------------------------
If an organization is using an internal certificate authority, then the root certificate will not appear in any ``cacerts.pem`` file that ships by default with operating systems and web browsers. Because of this, no currently deployed system will be able to verify certificates that are issued in this manner. To allow other systems to trust certificates from an internal certificate authority, this root certificate will need to be configured so that other systems can follow the chain of authority back to the root certificate. (An intermediate certificate is not enough becuase the root certificate is not already globally known.)

To use an internal certificate authority, append both the server and root certificates into a single ``.crt`` file. For example:

.. code-block:: bash

   $ cat server.crt root.crt >> /var/opt/opscode/nginx/ca/FQDN.crt

Intermediate Certificates
-----------------------------------------------------
To use an intermediate certificate, append both the server and intermediate certificates into a single ``.crt`` file. For example:

.. code-block:: bash

   $ cat server.crt intermediate.crt >> /var/opt/opscode/nginx/ca/FQDN.crt

Regenerate Certificates
-----------------------------------------------------
.. include:: ../../includes_server_security/includes_server_security_ssl_cert_regenerate.rst


Key Rotation
=====================================================
Use the following commands to manage public and private key rotation for users and clients.

add-client-key
-----------------------------------------------------
.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_add_client_key.rst

**Syntax**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_add_client_key_syntax.rst

**Options**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_add_client_key_options.rst

add-user-key
-----------------------------------------------------
.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_add_user_key.rst

**Syntax**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_add_user_key_syntax.rst

**Options**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_add_user_key_options.rst

delete-client-key
-----------------------------------------------------
.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_delete_client_key.rst

**Syntax**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_delete_client_key_syntax.rst

**Options**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_delete_client_key_options.rst

delete-user-key
-----------------------------------------------------
.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_delete_user_key.rst

**Syntax**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_delete_user_key_syntax.rst

**Options**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_delete_user_key_options.rst

list-client-key
-----------------------------------------------------
.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_list_client_keys.rst

**Syntax**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_list_client_keys_syntax.rst

**Options**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_list_client_keys_options.rst

list-user-key
-----------------------------------------------------
.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_list_user_keys.rst

**Syntax**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_list_user_keys_syntax.rst

**Options**

.. include:: ../../includes_ctl_chef_server/includes_ctl_chef_server_list_user_keys_options.rst

**Example**

.. include:: ../../step_ctl_chef_server/step_ctl_chef_server_list_user_keys.rst

chef-client Settings
=====================================================
.. include:: ../../includes_chef_client/includes_chef_client_ssl_config_settings.rst
